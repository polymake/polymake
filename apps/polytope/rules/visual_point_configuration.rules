#  Copyright (c) 1997-2022
#  Ewgenij Gawrilow, Michael Joswig, and the polymake team
#  Technische UniversitÃ¤t Berlin, Germany
#  https://polymake.org
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#-------------------------------------------------------------------------------

package Visual::PointConfiguration;
use Polymake::Struct (
   [ '@ISA' => 'Container' ],
   [ '$PointConfiguration' => '#%' ],
);

# where to keep the view transformation matrix etc.
method representative { $_[0]->PointConfiguration }

method basis_solid { $_[0]->elements->[0] }

# Visualize the [[TRIANGULATION]] of a point configuration
# @param Array<Set<Int>> t facets of the triangulation
# @options %Visual::Polygons::decorations
# @return Visual::PointConfiguration
user_method TRIANGULATION(; $=$_[0]->PointConfiguration->TRIANGULATION->FACETS, %Visual::Polygons::decorations) {
   my ($self, $TR, $decor)=@_;
   my $d=$self->PointConfiguration->VECTOR_AMBIENT_DIM-1;
   if ($d > 3) {
      die "don't know how to visualize the triangulation of a $d-d configuration\n";
   }

   my $skeleton=$self->basis_solid;
   $skeleton->VertexStyle="hidden";
   $skeleton->FacetStyle="hidden";
   
   my $labels= delete $decor->{VertexLabels};
   if ($labels ne "hidden") {
      $labels=$skeleton->VertexLabels;
   } else {
      undef $labels;
   }
   my $Points=$skeleton->Vertices;
   my $Signs=triang_sign($TR, $self->PointConfiguration->POINTS);
    
   $self->Name="Triangulation of ".$self->PointConfiguration->name;
   push @{$self->elements}, [ $self->PointConfiguration->CONVEX_HULL->VisualSimplices($TR,$Points,$Signs,$labels,$decor) ];

   visualize($self);
}

# Visualize a [[POLYTOPAL_SUBDIVISION]] of a point configuration.
# @param Int index Index of the subdivision to visualize
# @options %Visual::Polygons::decorations
# @options %geometric_options
# @return Visual::PointConfiguration
user_method POLYTOPAL_SUBDIVISION(;$=0,%Visual::Polygons::decorations, %geometric_options) {
    my ($self, $index, $decor, $geom)=@_;
    
    my $d=$self->PointConfiguration->VECTOR_AMBIENT_DIM-1;
    if ($d > 3) {
        die "don't know how to visualize the polytopal subdivision of a $d-d configuration\n";
    }
    $self->Name="Polytopal subdivision of ".$self->PointConfiguration->name;
    my $pc=$self->PointConfiguration->POINTS;
    my $psd=$self->PointConfiguration->POLYTOPAL_SUBDIVISION->[$index]->MAXIMAL_CELLS;
    my @faces=();

    my $skeleton=$self->basis_solid;
#    $skeleton->EdgeStyle="hidden";
    if ( $d == 3 ) {
	$skeleton->FacetStyle="hidden";
	foreach (@{$psd}) {
	    my $p=new polytope::Polytope<Rational>(POINTS=>$pc->minor($_,All));
	    my $P=new Visual::Polygons( Vertices => Visual::transform_float(dehomogenize(convert_to<Float>($p->VERTICES)),$geom->{Transformation},$geom->{Offset}),
					Facets => $p->VIF_CYCLIC_NORMAL,
					VertexLabels => "hidden",
					FacetNeighbors => $p->NEIGHBOR_FACETS_CYCLIC_NORMAL,
					Closed => 1,
					NEdges => $p->N_EDGES,
					$decor
		);
	    push @faces, new Visual::Polytope(Polytope=>$p,$P);
	}
    } else {
	foreach (@{$psd}) {
	    my $p=new polytope::Polytope<Rational>(POINTS=>$pc->minor($_,All));
	    my $P=new Visual::Polygon(Vertices => Visual::transform_float(dehomogenize(convert_to<Float>($p->VERTICES)),$geom->{Transformation},$geom->{Offset}),
				 VertexLabels => "hidden",
				 Facet => $p->VIF_CYCLIC_NORMAL->[0],
				 NEdges => $p->N_EDGES,
				 $decor
			       );
	    push @{faces}, new Visual::Polytope(Polytope=>$p,$P);
	}
    }
    compose($self,@faces);
}



package Visual::Color;

# Color for the non-vertices.
custom $non_vertices="255 255 0";


# @topic objects/Visual::PointConfiguration
# @category Visualization
# Visualization of the point configuration.

object PointConfiguration {

# @category Visualization
# Visualize the [[POINTS]] of a point configuration.
# @options %Visual::Polygons::decorations
# @options %geometric_options
# @return Visual::Object
user_method VISUAL_POINTS(%Visual::Polygons::decorations, %geometric_options) : POINTS, NON_VERTICES, N_POINTS {
   my ($this, $decor, $geom)=@_;
   my @colors = map { exists $this->NON_VERTICES->{$_} ? $Visual::Color::non_vertices : $Visual::Color::vertices } @{range(0,$this->N_POINTS-1)};
   visualize( new Visual::PointSet(Name => $this->name,
                                   Points => Visual::transform_float(dehomogenize(convert_to<Float>($this->POINTS)),$geom->{Transformation},$geom->{Offset}),
                                   PointLabels =>$this->lookup("LABELS"),
                                   PointColor => \@colors,
                                 $decor
                               ));
}


# @category Visualization
# Visualize a point configuration.
# @options %Visual::Polygons::decorations
# @options %geometric_options
# @return Visual::PointConfiguration
user_method VISUAL(%Visual::Polygons::decorations, %geometric_options) : POINTS, NON_VERTICES, N_POINTS, PIF_CYCLIC_NORMAL {
   my ($this, $decor, $geom)=@_;
   my @colors = map { exists $this->NON_VERTICES->{$_} ? $Visual::Color::non_vertices : $Visual::Color::vertices } @{range(0,$this->N_POINTS-1)};
   my $P= $this->VECTOR_DIM==3
	  ? new Visual::Polygon( Name => $this->name,
				 Points => Visual::transform_float(dehomogenize(convert_to<Float>($this->POINTS)),$geom->{Transformation},$geom->{Offset}),
				 PointLabels =>$this->lookup("POINT_LABELS") ,
				 PointColor => \@colors,
				 Facet => $this->PIF_CYCLIC_NORMAL->[0],
				 FacetTransparency => 0.5,
                                 NEdges => $this->CONVEX_HULL->N_EDGES,
   				 $decor
			       )
	  : new Visual::Polygons( Name => $this->name,
				  Points => Visual::transform_float(dehomogenize(convert_to<Float>($this->POINTS)),$geom->{Transformation},$geom->{Offset}),
				  PointLabels => $this->lookup("POINT_LABELS"),
				  PointColor => \@colors,
				  Facets => $this->PIF_CYCLIC_NORMAL,
				  FacetNeighbors => $this->CONVEX_HULL->NEIGHBOR_FACETS_CYCLIC_NORMAL,
				  FacetNormals => Visual::transform_float_facets(convert_to<Float>($this->CONVEX_HULL->FACETS),$geom->{Transformation},$geom->{Offset}),
				  FacetLabels => $this->CONVEX_HULL->lookup("FACET_LABELS") || "hidden",
				  FacetTransparency => 0.5,
				  Closed => 1,
				  NEdges => $this->CONVEX_HULL->N_EDGES,
				  $decor
				);
   visualize( new Visual::PointConfiguration(Name => $this->name, PointConfiguration => $this, $P));
}
precondition : VECTOR_DIM { $this->VECTOR_DIM>=3 }
precondition : VECTOR_AMBIENT_DIM { $this->VECTOR_AMBIENT_DIM<=4 }
precondition : BOUNDED;

# @hide
user_method VISUAL(%Visual::Polygons::decorations, %geometric_options) : POINTS, GRAPH.ADJACENCY {
   my ($this, $decor, $geom)=@_;
   my $pc=$this->VISUAL_POINTS(Name=>'points', $decor, $geom);
   my $G=$this->GRAPH->VISUAL(Name=>$this->name, Coord=>Visual::transform_float(dehomogenize(convert_to<Float>($this->POINTS)),$geom->{Transformation},$geom->{Offset}), $decor);
   visualize( new Visual::PointConfiguration(Name => $this->name, PointConfiguration => $this, $G, $pc) );
}
precondition : VECTOR_DIM { $this->VECTOR_DIM==2 }
precondition : VECTOR_AMBIENT_DIM { $this->VECTOR_AMBIENT_DIM<=4 }
precondition : BOUNDED;

}

package Visual::VectorConfiguration;
use Polymake::Struct (
   [ '@ISA' => 'Container' ],
   [ '$VectorConfiguration' => '#%' ],
);

object VectorConfiguration {

# @category Visualization
# Visualize a vector configuration.
# @options %Visual::Polygons::decorations
# @options %geometric_options_linear
# @return Visual::PointConfiguration

user_method VISUAL(%Visual::Polygons::decorations, %geometric_options_linear) : VECTORS, N_VECTORS {
   my ($this, $decor, $geom)=@_;
   visualize( new Visual::PointSet(Name => $this->name,
                                   Points => Visual::transform_float(convert_to<Float>($this->VECTORS),$geom->{Transformation}),
                                   PointLabels =>$this->lookup("LABELS"),
                                 $decor
                               ));
}
precondition : VECTOR_AMBIENT_DIM { $this->VECTOR_AMBIENT_DIM<=3 }

}


# Local Variables:
# mode: perl
# cperl-indent-level:4
# indent-tabs-mode:nil
# End:
