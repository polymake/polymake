#  Copyright (c) 1997-2022
#  Ewgenij Gawrilow, Michael Joswig, and the polymake team
#  Technische Universit√§t Berlin, Germany
#  https://polymake.org
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#-------------------------------------------------------------------------------

object PolyhedralFan<Rational> {

# @category Toric Varieties
# A fan is __Q-GORENSTEIN__ if each maximal cone is [[Cone::Q_GORENSTEIN_CONE|Q_Gorenstein]].
  property Q_GORENSTEIN : Bool;

# @category Toric Varieties
# If a fan is [[Q_GORENSTEIN]], then its __Q-Gorenstein index__ is the least common multiple of the [[Cone::Q_GORENSTEIN_CONE_INDEX|Q-Gorenstein indices]] of its maximal cones. Otherwise Q_GORENSTEIN_INDEX is undefined.
  property Q_GORENSTEIN_INDEX : Int;

# @category Toric Varieties
# A fan is __Gorenstein__ if it is [[Q_GORENSTEIN]] with [[Q_GORENSTEIN_INDEX]] equal to one.
  property GORENSTEIN : Bool;

# @category Toric Varieties
# A fan is __smooth__ if all cones of the fan are [[Cone::SMOOTH_CONE|smooth]].
  property SMOOTH_FAN : Bool;

  rule Q_GORENSTEIN, Q_GORENSTEIN_INDEX : RAYS, MAXIMAL_CONES, FAN_DIM {

    my $r = 1;
    foreach (@{$this->MAXIMAL_CONES}) {
      my $g = polytope::q_gorenstein_cone($this->RAYS->minor($_,All), $this->FAN_DIM);
      if ( !$g->first ) {
	  $this->Q_GORENSTEIN = false;
	  return;
      } else {
        $r = lcm($r, $g->second);
      }
    }

    $this->Q_GORENSTEIN = true;
    $this->Q_GORENSTEIN_INDEX = $r;
  }
  weight 1.10;

  rule GORENSTEIN : Q_GORENSTEIN, Q_GORENSTEIN_INDEX {
    $this->GORENSTEIN = $this->Q_GORENSTEIN && $this->Q_GORENSTEIN_INDEX == 1;
  }
  weight 0.1;

  rule GORENSTEIN, Q_GORENSTEIN, Q_GORENSTEIN_INDEX : {
    $this->GORENSTEIN = true;
    $this->Q_GORENSTEIN = true;
    $this->Q_GORENSTEIN_INDEX = 1;
  }
  precondition : SMOOTH_FAN;
  weight 0.1;

  rule SMOOTH_FAN : RAYS, MAXIMAL_CONES, SIMPLICIAL {
    if ( !$this->SIMPLICIAL ) {
      $this->SMOOTH_FAN = false;
    } else {
      my $rays = primitive($this->RAYS);
      my $smooth_fan = true;
      foreach (@{$this->MAXIMAL_CONES}) {
	my $g = 0;
	my $m = $rays->minor($_,All);
	foreach (@{all_subsets_of_k(sequence(0, $m->cols), $m->rows)}) {
	  $g = gcd($g, abs(det($m->minor(All,$_))));
	  last if ($g == 1);
	}
	$smooth_fan = false, last if $g != 1;
      }

      $this->SMOOTH_FAN = $smooth_fan;
    }
  }
  weight 1.10;

}
# Local Variables:
# mode: perl
# c-basic-offset:3
# End:

