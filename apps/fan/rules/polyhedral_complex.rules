#  Copyright (c) 1997-2021
#  Ewgenij Gawrilow, Michael Joswig, and the polymake team
#  Technische UniversitÃ¤t Berlin, Germany
#  https://polymake.org
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#-------------------------------------------------------------------------------

object PolyhedralComplex {


method construct(topaz::GeometricSimplicialComplex) {
  my $complex=$_[1];
  if (!defined ($complex->lookup("FACETS"))) {
      return new PolyhedralComplex(POINTS=>(ones_vector()|$complex->COORDINATES),INPUT_POLYTOPES=>$complex->INPUT_FACES,INPUT_LINEALITY=>new Matrix(0,$complex->COORDINATES->cols+1));
  }
  return new PolyhedralComplex(VERTICES=>(ones_vector()|$complex->COORDINATES->minor($complex->VERTEX_INDICES,All)),MAXIMAL_POLYTOPES=>$complex->FACETS,LINEALITY_SPACE=>new Matrix(0,$complex->COORDINATES->cols+1));
}

rule FAR_VERTICES : VERTICES {
   $this->FAR_VERTICES=polytope::far_points($this->VERTICES);
}
weight 1.10;

rule COMPLETE : {
   $this->COMPLETE = false;
}
weight 0.10;


}

object topaz::HyperbolicSurface {
 
   # @category Other 
   # Computes the GKZ dome of the //k//-th Delaunay trianglation up to a given //depth//.
   # Note that //k// is also the index of the corresponding flip word in [[FLIP_WORDS]].
   # Projection to the disc yields (a part of) the covering triangulation of the Klein disc.
   # @param Int k index of the flip word  
   # @param Int depth
   # @return fan::PolyhedralComplex<Rational>
   # @example
   # > $T = new Array<Array<Int>>([[0,0,6,5],[0,0,1,10],[0,0,8,2],[1,0,11,4],[1,0,7,3],[1,0,9,0]]);
   # > $s = new HyperbolicSurface(DCEL_DATA=>$T, PENNER_COORDINATES=>[1,1,1,1,1,1], SPECIAL_POINT=>[1,0]);
   # > $d = $s->gkz_dome(0,3);
   # > $d->VISUAL;
   #
   user_method gkz_dome($$){
      my $self = shift;
      my $triang = shift;
      my $depth = shift;
      covering_triangulation($self, $triang, $depth);
   }

}

# Local Variables:
# mode: perl
# cperl-indent-level:3
# indent-tabs-mode:nil
# End:
