#  Copyright (c) 1997-2021
#  Ewgenij Gawrilow, Michael Joswig, and the polymake team
#  Technische UniversitÃ¤t Berlin, Germany
#  https://polymake.org
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#-------------------------------------------------------------------------------

object polytope::Polytope {


# @category Visualization
# Visualize the [[BOUNDED_COMPLEX.GRAPH]] of a polyhedron.
# @option Int seed random seed value for the string embedder
# @return Visual::PolytopeGraph

user_method VISUAL_BOUNDED_GRAPH(%Visual::Graph::decorations, { seed => undef }) {
   my ($this, $decor, $seed)=@_;
   my $VG=$this->BOUNDED_COMPLEX->GRAPH->VISUAL( Name => $this->name,
					exists $decor->{NodeBorderColor} ? () : (NodeColor => $Visual::Color::vertices),
					$decor, $seed );
   visualize( new Visual::PolytopeGraph( Name => "Bounded graph of " . $this->name,
					 Polytope => $this,
					 bounded => 1,
					 $VG ));
}

}
package Visual::PolytopeGraph;

# Produce an edge coloring of a bounded graph from local data in the Hasse diagram.
# @return Visual::PolytopeGraph

user_method EDGE_COLORS {
   my ($self)=@_;
   my $ts=$self->Polytope;
   my $dim = $ts->CONE_DIM-2;
   my @dim_colors=map { 
      my $red = ($dim-$_)/($dim-1);
      new RGB($red,0.0,1-$red);
   } 1..$dim;
   my @edge_colors=map { $dim_colors[$_-1] } @{$ts->BOUNDED_COMPLEX->GRAPH->EDGE_COLORS};
   $self->basis_graph->merge(EdgeColor => \@edge_colors);
   visualize($self);
}



# Local Variables:
# mode: perl
# c-basic-offset:3
# End:
