{"app": "common",
 "inst": [
  {"guard_name": "CORE_WRAPPERS_Array", "include": ["polymake/Array.h"], "pkg": "Polymake::common::Array", "wrapper_file": "include/core-wrappers/polymake/Array.h"},
  {"class": "Array<Rational>", "include": ["polymake/Array.h", "polymake/Rational.h"], "pkg": "Polymake::common::Array__Rational"},
  {"class": "Array<Int>", "include": ["polymake/Array.h"], "pkg": "Polymake::common::Array__Int"},
  {"class": "Array<Set<Int>>", "include": ["polymake/Array.h", "polymake/Set.h"], "pkg": "Polymake::common::Array__Set__Int"},
  {"class": "Array<std::string>", "include": ["polymake/Array.h"], "pkg": "Polymake::common::Array__String"},
  {"class": "Array<Array<Bitset>>", "include": ["polymake/Array.h", "polymake/Bitset.h"], "pkg": "Polymake::common::Array__Array__Bitset"},
  {"class": "Array<Bitset>", "include": ["polymake/Array.h", "polymake/Bitset.h"], "pkg": "Polymake::common::Array__Bitset"},
  {"class": "Array<QuadraticExtension<Rational>>", "include": ["polymake/Array.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "pkg": "Polymake::common::Array__QuadraticExtension__Rational"},
  {"args": ["Array<Bitset>"], "include": ["polymake/Array.h", "polymake/Bitset.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Array<Bitset>&>", "perl::Canned<const Array<Bitset>&>"], "include": ["polymake/Array.h", "polymake/Bitset.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Array<Bitset>>"], "include": ["polymake/Array.h", "polymake/Bitset.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Array<Array<Bitset>>&>", "perl::Canned<const Array<Array<Bitset>>&>"], "include": ["polymake/Array.h", "polymake/Bitset.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Rational>"], "include": ["polymake/Array.h", "polymake/Rational.h"], "op": "new", "sig": "new"},
  {"args": ["Array<Int>"], "include": ["polymake/Array.h"], "op": "new", "sig": "new"},
  {"args": ["Array<std::string>"], "include": ["polymake/Array.h"], "op": "new", "sig": "new"},
  {"args": ["Array<QuadraticExtension<Rational>>"], "include": ["polymake/Array.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "op": "new", "sig": "new"},
  {"args": ["Array<Set<Int>>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"class": "Array<Polynomial<Rational, Int>>", "include": ["polymake/Array.h", "polymake/Polynomial.h", "polymake/Rational.h"], "pkg": "Polymake::common::Array__Polynomial_A_Rational_I_Int_Z"},
  {"class": "Array<Set<Array<Int>>>", "include": ["polymake/Array.h", "polymake/Set.h"], "pkg": "Polymake::common::Array__Set__Array__Int"},
  {"class": "Array<hash_map<Bitset, Rational>>", "include": ["polymake/Array.h", "polymake/Bitset.h", "polymake/Rational.h", "polymake/hash_map"], "pkg": "Polymake::common::Array__HashMap_A_Bitset_I_Rational_Z"},
  {"class": "Array<Array<Int>>", "include": ["polymake/Array.h"], "pkg": "Polymake::common::Array__Array__Int"},
  {"class": "Array<bool>", "include": ["polymake/Array.h"], "pkg": "Polymake::common::Array__Bool"},
  {"class": "Array<std::list<Int>>", "include": ["polymake/Array.h", "polymake/list"], "pkg": "Polymake::common::Array__List__Int"},
  {"class": "Array<IncidenceMatrix<NonSymmetric>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h"], "pkg": "Polymake::common::Array__IncidenceMatrix__NonSymmetric"},
  {"class": "Array<Array<Rational>>", "include": ["polymake/Array.h", "polymake/Rational.h"], "pkg": "Polymake::common::Array__Array__Rational"},
  {"class": "Array<Set<Set<Int>>>", "include": ["polymake/Array.h", "polymake/Set.h"], "pkg": "Polymake::common::Array__Set__Set__Int"},
  {"class": "Array<Matrix<Integer>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Integer.h", "polymake/Matrix.h"], "pkg": "Polymake::common::Array__Matrix_A_Integer_I_NonSymmetric_Z"},
  {"class": "Array<std::pair<Int, Int>>", "include": ["polymake/Array.h", "polymake/client.h"], "pkg": "Polymake::common::Array__Pair_A_Int_I_Int_Z"},
  {"class": "Array<Set<Array<Set<Int>>>>", "include": ["polymake/Array.h", "polymake/Set.h"], "pkg": "Polymake::common::Array__Set__Array__Set__Int"},
  {"class": "Array<Array<Set<Int>>>", "include": ["polymake/Array.h", "polymake/Set.h"], "pkg": "Polymake::common::Array__Array__Set__Int"},
  {"args": ["Array<Array<Int>>", "perl::Canned<const Array<std::list<Int>>&>"], "include": ["polymake/Array.h", "polymake/list"], "op": "new", "sig": "new.X"},
  {"class": "Array<std::pair<Array<Int>, Array<Int>>>", "include": ["polymake/Array.h", "polymake/client.h"], "pkg": "Polymake::common::Array__Pair_A_Array__Int_I_Array__Int_Z"},
  {"class": "Array<double>", "include": ["polymake/Array.h"], "pkg": "Polymake::common::Array__Float"},
  {"args": ["perl::Canned<const Array<std::string>&>", "perl::Canned<const Array<std::string>&>"], "include": ["polymake/Array.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Array<Int>&>", "perl::Canned<const Array<Int>&>"], "include": ["polymake/Array.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<double>", "perl::Canned<const EdgeMap<Undirected, double>&>"], "include": ["polymake/Array.h", "polymake/Graph.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<double>"], "include": ["polymake/Array.h"], "op": "new", "sig": "new"},
  {"args": ["Array<Set<Int>>", "Int"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const Array<Set<Int>>&>", "perl::Canned<const Array<Set<Int>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<IncidenceMatrix<NonSymmetric>>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h"], "op": "new", "sig": "new"},
  {"class": "Array<hash_set<Int>>", "include": ["polymake/Array.h", "polymake/hash_set"], "pkg": "Polymake::common::Array__HashSet__Int"},
  {"class": "Array<Array<Matrix<Rational>>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h"], "pkg": "Polymake::common::Array__Array__Matrix_A_Rational_I_NonSymmetric_Z"},
  {"class": "Array<Set<Matrix<Rational>>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h"], "pkg": "Polymake::common::Array__Set__Matrix_A_Rational_I_NonSymmetric_Z"},
  {"class": "Array<Matrix<Rational>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h"], "pkg": "Polymake::common::Array__Matrix_A_Rational_I_NonSymmetric_Z"},
  {"class": "Array<Matrix<QuadraticExtension<Rational>>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "pkg": "Polymake::common::Array__Matrix_A_QuadraticExtension__Rational_I_NonSymmetric_Z"},
  {"class": "Array<Array<Array<Int>>>", "include": ["polymake/Array.h"], "pkg": "Polymake::common::Array__Array__Array__Int"},
  {"class": "Array<Set<Matrix<QuadraticExtension<Rational>>>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h"], "pkg": "Polymake::common::Array__Set__Matrix_A_QuadraticExtension__Rational_I_NonSymmetric_Z"},
  {"args": ["Array<Array<Int>>"], "include": ["polymake/Array.h"], "op": "new", "sig": "new"},
  {"args": ["Array<Matrix<QuadraticExtension<Rational>>>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "op": "new", "sig": "new"},
  {"args": ["Array<Matrix<QuadraticExtension<Rational>>>", "perl::Canned<const Set<Matrix<QuadraticExtension<Rational>>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Matrix<Integer>>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Integer.h", "polymake/Matrix.h"], "op": "new", "sig": "new"},
  {"args": ["Array<Matrix<Rational>>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h"], "op": "new", "sig": "new"},
  {"args": ["Array<Matrix<Rational>>", "perl::Canned<const Set<Matrix<Rational>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const Array<Array<Int>>&>", "perl::Canned<const Array<Array<Int>>&>"], "include": ["polymake/Array.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Array<Matrix<Rational>>&>", "perl::Canned<const Array<Matrix<Rational>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Set<Array<Int>>>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["Array<Set<Matrix<QuadraticExtension<Rational>>>>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Array<Set<Array<Int>>>&>", "perl::Canned<const Array<Set<Array<Int>>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Array<Set<Matrix<QuadraticExtension<Rational>>>>&>", "perl::Canned<const Array<Set<Matrix<QuadraticExtension<Rational>>>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Set<Matrix<QuadraticExtension<Rational>>>>", "perl::Canned<const Array<Set<Matrix<QuadraticExtension<Rational>>>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Matrix<QuadraticExtension<Rational>>>", "perl::Canned<const Array<Matrix<QuadraticExtension<Rational>>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const Array<Matrix<QuadraticExtension<Rational>>>&>", "perl::Canned<const Array<Matrix<QuadraticExtension<Rational>>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Set<Array<Int>>>", "perl::Canned<const Array<Set<Array<Int>>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Array<Int>>", "perl::Canned<const Array<Array<Int>>&>"], "include": ["polymake/Array.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<QuadraticExtension<Rational>>", "perl::Canned<const Array<Int>&>"], "include": ["polymake/Array.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const Array<QuadraticExtension<Rational>>&>", "perl::Canned<const Array<QuadraticExtension<Rational>>&>"], "include": ["polymake/Array.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Array<Array<Int>>>", "perl::Canned<const Array<Set<Array<Int>>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "assign", "ret": "empty", "sig": "assign:O"},
  {"args": ["Array<Set<Int>>", "perl::Canned<const Array<hash_set<Int>>&>"], "include": ["polymake/Array.h", "polymake/Set.h", "polymake/hash_set"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Array<Array<Int>>>", "perl::Canned<const Array<Set<Array<Int>>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "convert", "ret": "empty", "sig": "convert:O"},
  {"args": ["Array<hash_map<Bitset, Rational>>"], "include": ["polymake/Array.h", "polymake/Bitset.h", "polymake/Rational.h", "polymake/hash_map"], "op": "new", "sig": "new"},
  {"args": ["Array<Int>", "Int"], "include": ["polymake/Array.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Int>", "perl::Canned<const Array<Int>&>"], "include": ["polymake/Array.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Array<Matrix<Rational>>>", "perl::Canned<const Array<Set<Matrix<Rational>>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h"], "op": "convert", "ret": "empty", "sig": "convert:O"},
  {"args": ["Array<Set<Int>>", "perl::Canned<const std::list<Set<Int>>&>"], "include": ["polymake/Array.h", "polymake/Set.h", "polymake/list"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Set<Int>>", "perl::Canned<const Array<Set<Int>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<std::string>", "perl::Canned<const Array<std::string>&>"], "include": ["polymake/Array.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Set<Int>>", "perl::Canned<const Set<Set<Int>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Array<Set<Int>>>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Array<Array<Set<Int>>>&>", "perl::Canned<const Array<Array<Set<Int>>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Set<Int>>", "perl::Canned<const pm::Rows<pm::IncidenceMatrix<pm::NonSymmetric> >&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Polynomial<Rational, Int>>"], "include": ["polymake/Array.h", "polymake/Polynomial.h", "polymake/Rational.h"], "op": "new", "sig": "new"},
  {"class": "Array<SparseMatrix<Integer, NonSymmetric>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Integer.h", "polymake/SparseMatrix.h"], "pkg": "Polymake::common::Array__SparseMatrix_A_Integer_I_NonSymmetric_Z"},
  {"class": "Array<std::list<std::pair<Int, Int>>>", "include": ["polymake/Array.h", "polymake/client.h", "polymake/list"], "pkg": "Polymake::common::Array__List__Pair_A_Int_I_Int_Z"},
  {"args": ["Array<Set<Int>>", "perl::Canned<const FacetList&>"], "include": ["polymake/Array.h", "polymake/FacetList.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Int>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<std::string>", "perl::Canned<const std::list<std::string>&>"], "include": ["polymake/Array.h", "polymake/list"], "op": "new", "sig": "new.X"},
  {"args": ["Array<std::list<Int>>"], "include": ["polymake/Array.h", "polymake/list"], "op": "new", "sig": "new"},
  {"args": ["Array<bool>"], "include": ["polymake/Array.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Array<bool>&>", "perl::Canned<const Array<bool>&>"], "include": ["polymake/Array.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<std::list<std::pair<Int, Int>>>"], "include": ["polymake/Array.h", "polymake/client.h", "polymake/list"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Array<std::list<std::pair<Int, Int>>>&>", "perl::Canned<const Array<std::list<std::pair<Int, Int>>>&>"], "include": ["polymake/Array.h", "polymake/client.h", "polymake/list"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Set<Set<Int>>>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Array<Set<Set<Int>>>&>", "perl::Canned<const Array<Set<Set<Int>>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<SparseMatrix<Integer, NonSymmetric>>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Integer.h", "polymake/SparseMatrix.h"], "op": "new", "sig": "new"},
  {"args": ["Array<Int>", "perl::Canned<const pm::IndexedSlice<pm::masquerade<pm::ConcatRows, pm::Matrix<Int> const&>, pm::Series<Int, false> const, mlist<> >&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h"], "op": "new", "sig": "new.X"},
  {"class": "Array<std::pair<Set<Int>, Set<Int>>>", "include": ["polymake/Array.h", "polymake/Set.h", "polymake/client.h"], "pkg": "Polymake::common::Array__Pair_A_Set__Int_I_Set__Int_Z"},
  {"class": "Array<Integer>", "include": ["polymake/Array.h", "polymake/Integer.h"], "pkg": "Polymake::common::Array__Integer"},
  {"class": "Array<Set<Set<Set<Int>>>>", "include": ["polymake/Array.h", "polymake/Set.h"], "pkg": "Polymake::common::Array__Set__Set__Set__Int"},
  {"class": "Array<RGB>", "include": ["polymake/Array.h", "polymake/color.h"], "pkg": "Polymake::common::Array__RGB"},
  {"class": "Array<Array<std::list<Int>>>", "include": ["polymake/Array.h", "polymake/list"], "pkg": "Polymake::common::Array__Array__List__Int"},
  {"args": ["Array<Set<Matrix<Rational>>>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["Array<Bitset>", "perl::Canned<const Array<Bitset>&>"], "include": ["polymake/Array.h", "polymake/Bitset.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<std::pair<Array<Int>, Array<Int>>>"], "include": ["polymake/Array.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["Array<Array<std::list<Int>>>"], "include": ["polymake/Array.h", "polymake/list"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Array<std::pair<Array<Int>, Array<Int>>>&>", "perl::Canned<const Array<std::pair<Array<Int>, Array<Int>>>&>"], "include": ["polymake/Array.h", "polymake/client.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Array<Array<std::list<Int>>>&>", "perl::Canned<const Array<Array<std::list<Int>>>&>"], "include": ["polymake/Array.h", "polymake/list"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Rational>", "Int"], "include": ["polymake/Array.h", "polymake/Rational.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Set<Array<Set<Int>>>>", "perl::Canned<const Array<Set<Set<Set<Int>>>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Set<Array<Set<Int>>>>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Array<Set<Array<Set<Int>>>>&>", "perl::Canned<const Array<Set<Array<Set<Int>>>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Array<Set<Int>>>", "perl::Canned<const Array<Array<Bitset>>&>"], "include": ["polymake/Array.h", "polymake/Bitset.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<std::pair<Set<Int>, Set<Int>>>"], "include": ["polymake/Array.h", "polymake/Set.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["Array<hash_set<Int>>"], "include": ["polymake/Array.h", "polymake/hash_set"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Array<hash_set<Int>>&>", "perl::Canned<const Array<hash_set<Int>>&>"], "include": ["polymake/Array.h", "polymake/hash_set"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Int>", "perl::Canned<const Bitset&>"], "include": ["polymake/Array.h", "polymake/Bitset.h"], "op": "assign", "ret": "empty", "sig": "assign:O"},
  {"args": ["Array<Int>", "perl::Canned<const pm::Series<Int, true>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<hash_set<Int>>", "perl::Canned<const Array<Set<Int>>&>"], "include": ["polymake/Array.h", "polymake/Set.h", "polymake/hash_set"], "op": "convert", "ret": "empty", "sig": "convert:O"},
  {"args": ["perl::Canned<const Array<Rational>&>", "perl::Canned<const Array<Rational>&>"], "include": ["polymake/Array.h", "polymake/Rational.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Array<Rational>>"], "include": ["polymake/Array.h", "polymake/Rational.h"], "op": "new", "sig": "new"},
  {"args": ["Array<Matrix<Rational>>", "perl::Canned<const Array<Matrix<Rational>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<IncidenceMatrix<NonSymmetric>>", "perl::Canned<const Array<IncidenceMatrix<NonSymmetric>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const Array<IncidenceMatrix<NonSymmetric>>&>", "perl::Canned<const Array<IncidenceMatrix<NonSymmetric>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<IncidenceMatrix<NonSymmetric>>", "Int"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<std::pair<Int, Int>>"], "include": ["polymake/Array.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Array<std::pair<Int, Int>>&>", "perl::Canned<const Array<std::pair<Int, Int>>&>"], "include": ["polymake/Array.h", "polymake/client.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Set<Int>>", "perl::Canned<const pm::Rows<pm::IncidenceMatrix<pm::NonSymmetric> >&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "convert", "ret": "empty", "sig": "convert:O"},
  {"args": ["perl::Canned<const Array<std::list<Int>>&>", "perl::Canned<const Array<std::list<Int>>&>"], "include": ["polymake/Array.h", "polymake/list"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Int>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "convert", "ret": "empty", "sig": "convert:O"},
  {"args": ["Array<Int>", "perl::Canned<const Vector<Int>&>"], "include": ["polymake/Array.h", "polymake/Vector.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Set<Int>>", "perl::Canned<const Vector<Set<Int>>&>"], "include": ["polymake/Array.h", "polymake/Set.h", "polymake/Vector.h"], "op": "new", "sig": "new.X"},
  {"class": "Array<Matrix<PuiseuxFraction<Min, Rational, Rational>>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "pkg": "Polymake::common::Array__Matrix_A_PuiseuxFraction_A_Min_I_Rational_I_Rational_Z_I_NonSymmetric_Z"},
  {"class": "Array<Array<Vector<QuadraticExtension<Rational>>>>", "include": ["polymake/Array.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Vector.h"], "pkg": "Polymake::common::Array__Array__Vector__QuadraticExtension__Rational"},
  {"class": "Array<Array<Vector<PuiseuxFraction<Max, Rational, Rational>>>>", "include": ["polymake/Array.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/TropicalNumber.h", "polymake/Vector.h"], "pkg": "Polymake::common::Array__Array__Vector__PuiseuxFraction_A_Max_I_Rational_I_Rational_Z"},
  {"class": "Array<PuiseuxFraction<Min, Rational, Rational>>", "include": ["polymake/Array.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "pkg": "Polymake::common::Array__PuiseuxFraction_A_Min_I_Rational_I_Rational_Z"},
  {"class": "Array<SparseMatrix<Rational, NonSymmetric>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Rational.h", "polymake/SparseMatrix.h"], "pkg": "Polymake::common::Array__SparseMatrix_A_Rational_I_NonSymmetric_Z"},
  {"class": "Array<Array<Vector<PuiseuxFraction<Min, Rational, Rational>>>>", "include": ["polymake/Array.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/TropicalNumber.h", "polymake/Vector.h"], "pkg": "Polymake::common::Array__Array__Vector__PuiseuxFraction_A_Min_I_Rational_I_Rational_Z"},
  {"class": "Array<Vector<PuiseuxFraction<Max, Rational, Rational>>>", "include": ["polymake/Array.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/TropicalNumber.h", "polymake/Vector.h"], "pkg": "Polymake::common::Array__Vector__PuiseuxFraction_A_Max_I_Rational_I_Rational_Z"},
  {"class": "Array<Set<Matrix<double>>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Set.h"], "pkg": "Polymake::common::Array__Set__Matrix_A_Float_I_NonSymmetric_Z"},
  {"class": "Array<Vector<QuadraticExtension<Rational>>>", "include": ["polymake/Array.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Vector.h"], "pkg": "Polymake::common::Array__Vector__QuadraticExtension__Rational"},
  {"class": "Array<Matrix<PuiseuxFraction<Max, Rational, Rational>>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "pkg": "Polymake::common::Array__Matrix_A_PuiseuxFraction_A_Max_I_Rational_I_Rational_Z_I_NonSymmetric_Z"},
  {"class": "Array<PuiseuxFraction<Max, Rational, Rational>>", "include": ["polymake/Array.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "pkg": "Polymake::common::Array__PuiseuxFraction_A_Max_I_Rational_I_Rational_Z"},
  {"class": "Array<Set<Matrix<PuiseuxFraction<Max, Rational, Rational>>>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/Set.h", "polymake/TropicalNumber.h"], "pkg": "Polymake::common::Array__Set__Matrix_A_PuiseuxFraction_A_Max_I_Rational_I_Rational_Z_I_NonSymmetric_Z"},
  {"class": "Array<Set<Matrix<PuiseuxFraction<Min, Rational, Rational>>>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/Set.h", "polymake/TropicalNumber.h"], "pkg": "Polymake::common::Array__Set__Matrix_A_PuiseuxFraction_A_Min_I_Rational_I_Rational_Z_I_NonSymmetric_Z"},
  {"class": "Array<Vector<Rational>>", "include": ["polymake/Array.h", "polymake/Rational.h", "polymake/Vector.h"], "pkg": "Polymake::common::Array__Vector__Rational"},
  {"class": "Array<Array<Vector<Rational>>>", "include": ["polymake/Array.h", "polymake/Rational.h", "polymake/Vector.h"], "pkg": "Polymake::common::Array__Array__Vector__Rational"},
  {"class": "Array<Matrix<double>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h"], "pkg": "Polymake::common::Array__Matrix_A_Float_I_NonSymmetric_Z"},
  {"class": "Array<Vector<PuiseuxFraction<Min, Rational, Rational>>>", "include": ["polymake/Array.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/TropicalNumber.h", "polymake/Vector.h"], "pkg": "Polymake::common::Array__Vector__PuiseuxFraction_A_Min_I_Rational_I_Rational_Z"},
  {"class": "Array<Vector<double>>", "include": ["polymake/Array.h", "polymake/Vector.h"], "pkg": "Polymake::common::Array__Vector__Float"},
  {"class": "Array<Array<Vector<double>>>", "include": ["polymake/Array.h", "polymake/Vector.h"], "pkg": "Polymake::common::Array__Array__Vector__Float"},
  {"args": ["perl::Canned<const Array<Set<Matrix<Rational>>>&>", "perl::Canned<const Array<Set<Matrix<Rational>>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Array<hash_map<Bitset, Rational>>&>", "perl::Canned<const Array<hash_map<Bitset, Rational>>&>"], "include": ["polymake/Array.h", "polymake/Bitset.h", "polymake/Rational.h", "polymake/hash_map"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Array<Polynomial<Rational, Int>>&>", "perl::Canned<const Array<Polynomial<Rational, Int>>&>"], "include": ["polymake/Array.h", "polymake/Polynomial.h", "polymake/Rational.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Array<std::pair<Set<Int>, Set<Int>>>&>", "perl::Canned<const Array<std::pair<Set<Int>, Set<Int>>>&>"], "include": ["polymake/Array.h", "polymake/Set.h", "polymake/client.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Matrix<Integer>>", "perl::Canned<const Array<Matrix<Integer>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Integer.h", "polymake/Matrix.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Array<Set<Int>>>", "perl::Canned<const Array<Array<Set<Int>>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Polynomial<Rational, Int>>", "perl::Canned<const Array<Polynomial<Rational, Int>>&>"], "include": ["polymake/Array.h", "polymake/Polynomial.h", "polymake/Rational.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<SparseMatrix<Rational, NonSymmetric>>", "Int"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Rational.h", "polymake/SparseMatrix.h"], "op": "new", "sig": "new.X"},
  {"class": "Array<Array<Matrix<double>>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h"], "pkg": "Polymake::common::Array__Array__Matrix_A_Float_I_NonSymmetric_Z"},
  {"args": ["Array<Matrix<double>>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h"], "op": "new", "sig": "new"},
  {"args": ["Array<Array<Matrix<double>>>", "perl::Canned<const Array<Set<Matrix<double>>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Set.h"], "op": "convert", "ret": "empty", "sig": "convert:O"},
  {"args": ["perl::Canned<const Array<Matrix<double>>&>", "perl::Canned<const Array<Matrix<double>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Matrix<Rational>>", "Int"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h"], "op": "new", "sig": "new.X"},
  {"class": "Array<UniPolynomial<Rational, Int>>", "include": ["polymake/Array.h", "polymake/Rational.h", "polymake/RationalFunction.h"], "pkg": "Polymake::common::Array__UniPolynomial_A_Rational_I_Int_Z"},
  {"args": ["Array<UniPolynomial<Rational, Int>>"], "include": ["polymake/Array.h", "polymake/Rational.h", "polymake/RationalFunction.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Array<UniPolynomial<Rational, Int>>&>", "perl::Canned<const Array<UniPolynomial<Rational, Int>>&>"], "include": ["polymake/Array.h", "polymake/Rational.h", "polymake/RationalFunction.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Int>", "perl::Canned<const std::vector<Int, std::allocator<Int> >&>"], "include": ["polymake/Array.h", "polymake/permutations.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Int>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h"], "op": "new", "sig": "new.X"},
  {"class": "Array<std::pair<Array<Set<Int>>, std::pair<Vector<Int>, Vector<Int>>>>", "include": ["polymake/Array.h", "polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "pkg": "Polymake::common::Array__Pair_A_Array__Set__Int_I_Pair_A_Vector__Int_I_Vector__Int_Z_Z"},
  {"class": "Array<std::pair<Array<Set<Int>>, Vector<Int>>>", "include": ["polymake/Array.h", "polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "pkg": "Polymake::common::Array__Pair_A_Array__Set__Int_I_Vector__Int_Z"},
  {"args": ["Array<std::pair<Array<Set<Int>>, Vector<Int>>>"], "include": ["polymake/Array.h", "polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["Array<std::pair<Array<Set<Int>>, std::pair<Vector<Int>, Vector<Int>>>>"], "include": ["polymake/Array.h", "polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Array<std::pair<Array<Set<Int>>, Vector<Int>>>&>", "perl::Canned<const Array<std::pair<Array<Set<Int>>, Vector<Int>>>&>"], "include": ["polymake/Array.h", "polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Array<std::pair<Array<Set<Int>>, std::pair<Vector<Int>, Vector<Int>>>>&>", "perl::Canned<const Array<std::pair<Array<Set<Int>>, std::pair<Vector<Int>, Vector<Int>>>>&>"], "include": ["polymake/Array.h", "polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"class": "Array<Array<Integer>>", "include": ["polymake/Array.h", "polymake/Integer.h"], "pkg": "Polymake::common::Array__Array__Integer"},
  {"class": "Array<std::pair<Matrix<Rational>, Matrix<Int>>>", "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/client.h"], "pkg": "Polymake::common::Array__Pair_A_Matrix_A_Rational_I_NonSymmetric_Z_I_Matrix_A_Int_I_NonSymmetric_Z_Z"},
  {"args": ["Array<std::pair<Matrix<Rational>, Matrix<Int>>>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Array<std::pair<Matrix<Rational>, Matrix<Int>>>&>", "perl::Canned<const Array<std::pair<Matrix<Rational>, Matrix<Int>>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/client.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"class": "Array<SparseMatrix<GF2, NonSymmetric>>", "include": ["polymake/Array.h", "polymake/GF2.h", "polymake/IncidenceMatrix.h", "polymake/SparseMatrix.h"], "pkg": "Polymake::common::Array__SparseMatrix_A_GF2_I_NonSymmetric_Z"},
  {"args": ["Array<SparseMatrix<GF2, NonSymmetric>>"], "include": ["polymake/Array.h", "polymake/GF2.h", "polymake/IncidenceMatrix.h", "polymake/SparseMatrix.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Array<SparseMatrix<GF2, NonSymmetric>>&>", "perl::Canned<const Array<SparseMatrix<GF2, NonSymmetric>>&>"], "include": ["polymake/Array.h", "polymake/GF2.h", "polymake/IncidenceMatrix.h", "polymake/SparseMatrix.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"class": "Array<std::pair<Array<Int>, bool>>", "include": ["polymake/Array.h", "polymake/client.h"], "pkg": "Polymake::common::Array__Pair_A_Array__Int_I_Bool_Z"},
  {"args": ["Array<Set<Set<Set<Int>>>>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Array<Set<Set<Set<Int>>>>&>", "perl::Canned<const Array<Set<Set<Set<Int>>>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Array<Set<Set<Int>>>", "perl::Canned<const Array<Set<Set<Int>>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Set<Set<Set<Int>>>>", "perl::Canned<const Array<Set<Set<Set<Int>>>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Set<Matrix<double>>>", "perl::Canned<const Array<Set<Matrix<double>>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Matrix<double>>", "perl::Canned<const Array<Matrix<double>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<Array<Int>>", "perl::Canned<const pm::Rows<pm::Transposed<pm::Matrix<long> > >&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h"], "op": "new", "sig": "new.X"},
  {"args": ["Array<std::pair<Matrix<Rational>, Matrix<Int>>>", "perl::Canned<const std::list<std::pair<Matrix<Rational>, Matrix<Int>>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/client.h", "polymake/list"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const Array<Matrix<Integer>>&>", "perl::Canned<const Array<Matrix<Integer>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Integer.h", "polymake/Matrix.h"], "op": "_eq", "sig": "_eq:O.X.X"},
 null ],
"version": 3}
