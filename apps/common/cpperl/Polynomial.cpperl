{"app": "common",
 "inst": [
  {"guard_name": "CORE_WRAPPERS_Polynomial", "include": ["polymake/Polynomial.h"], "pkg": "Polymake::common::Polynomial", "wrapper_file": "include/core-wrappers/polymake/Polynomial.h"},
  {"class": "Polynomial<PuiseuxFraction<Min, Rational, Rational>, Int>", "include": ["polymake/Polynomial.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "pkg": "Polymake::common::Polynomial_A_PuiseuxFraction_A_Min_I_Rational_I_Rational_Z_I_Int_Z"},
  {"class": "Polynomial<TropicalNumber<Min, Rational>, Int>", "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "pkg": "Polymake::common::Polynomial_A_TropicalNumber_A_Min_I_Rational_Z_I_Int_Z"},
  {"class": "Polynomial<Rational, Int>", "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "pkg": "Polymake::common::Polynomial_A_Rational_I_Int_Z"},
  {"class": "Polynomial<QuadraticExtension<Rational>, Int>", "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "pkg": "Polymake::common::Polynomial_A_QuadraticExtension__Rational_I_Int_Z"},
  {"args": ["Polynomial<Rational, Int>", "Int", "Int"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["perl::Canned<const Polynomial<Rational, Int>&>", "perl::Canned<const Polynomial<Rational, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["perl::Canned<const Polynomial<Rational, Int>&>", "perl::Canned<const Polynomial<Rational, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const Polynomial<Rational, Int>&>", "perl::Canned<const Polynomial<Rational, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["Int", "perl::Canned<const Polynomial<Rational, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["Polynomial<Rational, Int>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Polynomial<Rational, Int>&>", "perl::Canned<const Polynomial<Rational, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Polynomial<Rational, Int>&>", "Int"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "xor", "sig": "xor:O.X.X"},
  {"args": ["perl::Canned<const Polynomial<Rational, Int>&>", "perl::Canned<const Polynomial<Rational, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "_gt", "sig": "_gt:O.X.X"},
  {"args": ["perl::Canned<const Polynomial<Rational, Int>&>", "Int"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Polynomial<TropicalNumber<Min, Rational>, Int>", "perl::Canned<const Vector<TropicalNumber<Min, Rational>>&>", "perl::Canned<const Matrix<Int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h", "polymake/Vector.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["Int", "perl::Canned<const Polynomial<Rational, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["Polynomial<QuadraticExtension<Rational>, Int>"], "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Polynomial<QuadraticExtension<Rational>, Int>&>", "perl::Canned<const Polynomial<QuadraticExtension<Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Polynomial<PuiseuxFraction<Min, Rational, Rational>, Int>&>", "Int"], "include": ["polymake/Polynomial.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "xor", "sig": "xor:O.X.X"},
  {"args": ["Int", "perl::Canned<const Polynomial<PuiseuxFraction<Min, Rational, Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const Polynomial<PuiseuxFraction<Min, Rational, Rational>, Int>&>", "perl::Canned<const Polynomial<PuiseuxFraction<Min, Rational, Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["perl::Canned<const Polynomial<PuiseuxFraction<Min, Rational, Rational>, Int>&>", "perl::Canned<const Polynomial<PuiseuxFraction<Min, Rational, Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["Polynomial<PuiseuxFraction<Min, Rational, Rational>, Int>"], "include": ["polymake/Polynomial.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Polynomial<PuiseuxFraction<Min, Rational, Rational>, Int>&>", "perl::Canned<const Polynomial<PuiseuxFraction<Min, Rational, Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"class": "Polynomial<TropicalNumber<Max, Rational>, Int>", "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "pkg": "Polymake::common::Polynomial_A_TropicalNumber_A_Max_I_Rational_Z_I_Int_Z"},
  {"args": ["Polynomial<QuadraticExtension<Rational>, Int>", "perl::Canned<const QuadraticExtension<Rational>&>", "perl::Canned<const pm::SameElementVector<Int const&>&>"], "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/linalg.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["Polynomial<QuadraticExtension<Rational>, Int>", "perl::Canned<const QuadraticExtension<Rational>&>", "perl::Canned<const pm::SameElementSparseVector<pm::SingleElementSetCmp<Int, pm::operations::cmp> const, Int const&>&>"], "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/linalg.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["perl::Canned<Polynomial<QuadraticExtension<Rational>, Int>&>", "perl::Canned<const Polynomial<QuadraticExtension<Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<const Polynomial<QuadraticExtension<Rational>, Int>&>", "perl::Canned<const Polynomial<QuadraticExtension<Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "op": "_ne", "sig": "_ne:O.X.X"},
  {"args": ["perl::Canned<const Polynomial<QuadraticExtension<Rational>, Int>&>", "Int"], "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "op": "xor", "sig": "xor:O.X.X"},
  {"args": ["perl::Canned<Polynomial<QuadraticExtension<Rational>, Int>&>", "perl::Canned<const Polynomial<QuadraticExtension<Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "op": "Mul", "ret": "lvalue", "sig": "Mul:O.X1.X"},
  {"args": ["perl::Canned<Polynomial<QuadraticExtension<Rational>, Int>&>", "perl::Canned<const QuadraticExtension<Rational>&>"], "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "op": "Sub", "ret": "lvalue", "sig": "Sub:O.X1.X"},
  {"args": ["perl::Canned<const Polynomial<QuadraticExtension<Rational>, Int>&>", "perl::Canned<const QuadraticExtension<Rational>&>"], "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h"], "op": "div", "sig": "div:O.X.X"},
  {"args": ["Polynomial<Rational, Int>", "perl::Canned<const Rational&>", "perl::Canned<const pm::SameElementVector<Int const&>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/linalg.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["Polynomial<Rational, Int>", "perl::Canned<const Rational&>", "perl::Canned<const pm::SameElementSparseVector<pm::SingleElementSetCmp<Int, pm::operations::cmp> const, Int const&>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/linalg.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["perl::Canned<Polynomial<Rational, Int>&>", "perl::Canned<const Polynomial<Rational, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<const Polynomial<Rational, Int>&>", "perl::Canned<const Polynomial<Rational, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "_ne", "sig": "_ne:O.X.X"},
  {"args": ["perl::Canned<Polynomial<Rational, Int>&>", "perl::Canned<const Polynomial<Rational, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "Mul", "ret": "lvalue", "sig": "Mul:O.X1.X"},
  {"args": ["perl::Canned<Polynomial<Rational, Int>&>", "perl::Canned<const Rational&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "Sub", "ret": "lvalue", "sig": "Sub:O.X1.X"},
  {"args": ["perl::Canned<const Polynomial<Rational, Int>&>", "perl::Canned<const Rational&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "div", "sig": "div:O.X.X"},
  {"args": ["Polynomial<Rational, Int>", "perl::Canned<const Vector<Rational>&>", "perl::Canned<const Matrix<Int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Polynomial.h", "polymake/Rational.h", "polymake/Vector.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["Polynomial<Rational, Int>", "perl::Canned<const pm::SameElementVector<pm::Rational const&>&>", "perl::Canned<const pm::MatrixMinor<pm::Matrix<Int>&, pm::Array<Int> const&, pm::all_selector const&>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Polynomial.h", "polymake/Rational.h", "polymake/linalg.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["Polynomial<Rational, Int>", "perl::Canned<const Vector<Rational>&>", "perl::Canned<const pm::MatrixMinor<pm::Matrix<Int>&, pm::all_selector const&, pm::Series<Int, true> const>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Polynomial.h", "polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["Polynomial<TropicalNumber<Max, Rational>, Int>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "new", "sig": "new"},
  {"args": ["Polynomial<TropicalNumber<Max, Rational>, Int>", "perl::Canned<const Polynomial<TropicalNumber<Max, Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "new", "sig": "new.X"},
  {"args": ["Polynomial<TropicalNumber<Min, Rational>, Int>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Polynomial<TropicalNumber<Max, Rational>, Int>&>", "perl::Canned<const Polynomial<TropicalNumber<Max, Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Polynomial<TropicalNumber<Min, Rational>, Int>&>", "perl::Canned<const Polynomial<TropicalNumber<Min, Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Polynomial<TropicalNumber<Min, Rational>, Int>", "perl::Canned<const Polynomial<TropicalNumber<Min, Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "new", "sig": "new.X"},
  {"args": ["Polynomial<TropicalNumber<Min, Rational>, Int>", "Int(Int)"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "new", "sig": "new.Int"},
  {"args": ["perl::Canned<const Polynomial<TropicalNumber<Min, Rational>, Int>&>", "perl::Canned<const Polynomial<TropicalNumber<Min, Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "_ne", "sig": "_ne:O.X.X"},
  {"args": ["Polynomial<TropicalNumber<Max, Rational>, Int>", "Int(Int)"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "new", "sig": "new.Int"},
  {"args": ["perl::Canned<const Polynomial<TropicalNumber<Max, Rational>, Int>&>", "perl::Canned<const Polynomial<TropicalNumber<Max, Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "_ne", "sig": "_ne:O.X.X"},
  {"args": ["Polynomial<TropicalNumber<Min, Rational>, Int>", "perl::Canned<const pm::SameElementVector<pm::TropicalNumber<pm::Min, pm::Rational> const&>&>", "perl::Canned<const pm::DiagMatrix<pm::SameElementVector<Int const&>, true>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h", "polymake/linalg.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["Polynomial<TropicalNumber<Max, Rational>, Int>", "perl::Canned<const pm::SameElementVector<pm::TropicalNumber<pm::Max, pm::Rational> const&>&>", "perl::Canned<const pm::DiagMatrix<pm::SameElementVector<Int const&>, true>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h", "polymake/linalg.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["Polynomial<TropicalNumber<Max, Rational>, Int>", "perl::Canned<const Vector<TropicalNumber<Max, Rational>>&>", "perl::Canned<const Matrix<Int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h", "polymake/Vector.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["perl::Canned<Polynomial<TropicalNumber<Min, Rational>, Int>&>", "perl::Canned<const Polynomial<TropicalNumber<Min, Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "Mul", "ret": "lvalue", "sig": "Mul:O.X1.X"},
  {"args": ["perl::Canned<const Polynomial<TropicalNumber<Min, Rational>, Int>&>", "perl::Canned<const Polynomial<TropicalNumber<Min, Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["Polynomial<TropicalNumber<Max, Rational>, Int>", "perl::Canned<const TropicalNumber<Max, Rational>&>", "Int"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["Polynomial<TropicalNumber<Min, Rational>, Int>", "perl::Canned<const TropicalNumber<Min, Rational>&>", "Int"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["Polynomial<TropicalNumber<Max, Rational>, Int>", "perl::Canned<const Vector<TropicalNumber<Max, Rational>>&>", "perl::Canned<const pm::MatrixMinor<pm::SparseMatrix<Int, pm::NonSymmetric>, pm::all_selector const&, pm::Series<Int, true> const>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Polynomial.h", "polymake/Rational.h", "polymake/Set.h", "polymake/SparseMatrix.h", "polymake/TropicalNumber.h", "polymake/Vector.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["Polynomial<Rational, Int>", "Int(Int)"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "new", "sig": "new.Int"},
  {"args": ["Polynomial<Rational, Int>", "perl::Canned<const Polynomial<Rational, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const Polynomial<Rational, Int>&>", "Int"], "include": ["polymake/Polynomial.h", "polymake/Rational.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["Polynomial<Rational, Int>", "perl::Canned<const Vector<Rational>&>", "perl::Canned<const pm::BlockMatrix<mlist<pm::RepeatedCol<pm::Vector<Int> const&> const, pm::Matrix<Int> const&>, std::integral_constant<bool, false> >&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Polynomial.h", "polymake/Rational.h", "polymake/Vector.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["Polynomial<TropicalNumber<Min, Rational>, Int>", "perl::Canned<const Vector<TropicalNumber<Min, Rational>>&>", "perl::Canned<const pm::MatrixMinor<pm::SparseMatrix<Int, pm::NonSymmetric>, pm::all_selector const&, pm::Series<Int, true> const>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Polynomial.h", "polymake/Rational.h", "polymake/Set.h", "polymake/SparseMatrix.h", "polymake/TropicalNumber.h", "polymake/Vector.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["Polynomial<Rational, Int>", "perl::Canned<const pm::SameElementVector<pm::Rational const&>&>", "perl::Canned<const pm::RepeatedRow<pm::SameElementVector<Int const&> >&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/linalg.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["Polynomial<TropicalNumber<Min, Rational>, Int>", "perl::Canned<const Vector<TropicalNumber<Min, Rational>>&>", "perl::Canned<const pm::Transposed<pm::Matrix<long> >&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Polynomial.h", "polymake/Rational.h", "polymake/TropicalNumber.h", "polymake/Vector.h"], "op": "new", "sig": "new.X.X"},
 null ],
"version": 3}
