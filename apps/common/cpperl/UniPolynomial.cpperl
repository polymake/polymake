{"app": "common",
 "inst": [
  {"guard_name": "CORE_WRAPPERS_RationalFunction", "include": ["polymake/RationalFunction.h"], "pkg": "Polymake::common::UniPolynomial", "wrapper_file": "include/core-wrappers/polymake/RationalFunction.h"},
  {"class": "UniPolynomial<Rational, Int>", "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "pkg": "Polymake::common::UniPolynomial_A_Rational_I_Int_Z"},
  {"class": "UniPolynomial<Rational, Rational>", "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "pkg": "Polymake::common::UniPolynomial_A_Rational_I_Rational_Z"},
  {"class": "UniPolynomial<TropicalNumber<Min, Rational>, Int>", "include": ["polymake/Rational.h", "polymake/RationalFunction.h", "polymake/TropicalNumber.h"], "pkg": "Polymake::common::UniPolynomial_A_TropicalNumber_A_Min_I_Rational_Z_I_Int_Z"},
  {"class": "UniPolynomial<PuiseuxFraction<Min, Rational, Rational>, Rational>", "include": ["polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/RationalFunction.h", "polymake/TropicalNumber.h"], "pkg": "Polymake::common::UniPolynomial_A_PuiseuxFraction_A_Min_I_Rational_I_Rational_Z_I_Rational_Z"},
  {"class": "UniPolynomial<UniPolynomial<Rational, Int>, Rational>", "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "pkg": "Polymake::common::UniPolynomial_A_UniPolynomial_A_Rational_I_Int_Z_I_Rational_Z"},
  {"class": "UniPolynomial<TropicalNumber<Max, Rational>, Int>", "include": ["polymake/Rational.h", "polymake/RationalFunction.h", "polymake/TropicalNumber.h"], "pkg": "Polymake::common::UniPolynomial_A_TropicalNumber_A_Max_I_Rational_Z_I_Int_Z"},
  {"class": "UniPolynomial<QuadraticExtension<Rational>, Int>", "include": ["polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/RationalFunction.h"], "pkg": "Polymake::common::UniPolynomial_A_QuadraticExtension__Rational_I_Int_Z"},
  {"args": ["Int", "perl::Canned<const UniPolynomial<Rational, Int>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "Int"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "perl::Canned<const UniPolynomial<UniPolynomial<Rational, Int>, Rational>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<UniPolynomial<Rational, Int>, Rational>&>", "perl::Canned<const UniPolynomial<UniPolynomial<Rational, Int>, Rational>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["UniPolynomial<UniPolynomial<Rational, Int>, Rational>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const UniPolynomial<UniPolynomial<Rational, Int>, Rational>&>", "perl::Canned<const UniPolynomial<UniPolynomial<Rational, Int>, Rational>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["UniPolynomial<TropicalNumber<Min, Rational>, Int>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h", "polymake/TropicalNumber.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const UniPolynomial<TropicalNumber<Min, Rational>, Int>&>", "perl::Canned<const UniPolynomial<TropicalNumber<Min, Rational>, Int>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h", "polymake/TropicalNumber.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["UniPolynomial<Rational, Rational>", "perl::Canned<const Array<Rational>&>", "perl::Canned<const Array<Rational>&>"], "include": ["polymake/Array.h", "polymake/Rational.h", "polymake/RationalFunction.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["UniPolynomial<Rational, Int>", "perl::Canned<const UniPolynomial<Rational, Int>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Rational>&>", "perl::Canned<const UniPolynomial<Rational, Rational>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "Int"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "xor", "sig": "xor:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "perl::Canned<const UniPolynomial<Rational, Int>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "perl::Canned<const UniPolynomial<Rational, Int>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "Int"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["UniPolynomial<Rational, Int>", "perl::Canned<const Array<Rational>&>", "perl::Canned<const Array<Int>&>"], "include": ["polymake/Array.h", "polymake/Rational.h", "polymake/RationalFunction.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "perl::Canned<const UniPolynomial<Rational, Int>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "Int"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "perl::Canned<const Rational&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "Int"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "div", "sig": "div:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "perl::Canned<const Rational&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "div", "sig": "div:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "neg", "sig": "neg:O.X"},
  {"args": ["Int", "perl::Canned<const UniPolynomial<Rational, Int>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["Int", "perl::Canned<const UniPolynomial<Rational, Int>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "perl::Canned<const Rational&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "perl::Canned<const Rational&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Rational>&>", "perl::Canned<const Rational&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "xor", "sig": "xor:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Rational>&>", "Int"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "xor", "sig": "xor:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Rational>&>", "perl::Canned<const UniPolynomial<Rational, Rational>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["Int", "perl::Canned<const UniPolynomial<Rational, Rational>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Rational>&>", "perl::Canned<const UniPolynomial<Rational, Rational>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Rational>&>", "Int"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Rational>&>", "perl::Canned<const UniPolynomial<Rational, Rational>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "div", "sig": "div:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Rational>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "neg", "sig": "neg:O.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Rational>&>", "Int"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<PuiseuxFraction<Min, Rational, Rational>, Rational>&>", "Int"], "include": ["polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/RationalFunction.h", "polymake/TropicalNumber.h"], "op": "xor", "sig": "xor:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<PuiseuxFraction<Min, Rational, Rational>, Rational>&>", "perl::Canned<const UniPolynomial<PuiseuxFraction<Min, Rational, Rational>, Rational>&>"], "include": ["polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/RationalFunction.h", "polymake/TropicalNumber.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["Int", "perl::Canned<const UniPolynomial<PuiseuxFraction<Min, Rational, Rational>, Rational>&>"], "include": ["polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/RationalFunction.h", "polymake/TropicalNumber.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["Int", "perl::Canned<const UniPolynomial<Rational, Rational>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "div", "sig": "div:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "perl::Canned<const UniPolynomial<Rational, Int>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "div", "sig": "div:O.X.X"},
  {"args": ["Int", "perl::Canned<const UniPolynomial<Rational, Int>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "div", "sig": "div:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<TropicalNumber<Max, Rational>, Int>&>", "Int"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h", "polymake/TropicalNumber.h"], "op": "xor", "sig": "xor:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<TropicalNumber<Max, Rational>, Int>&>", "perl::Canned<const UniPolynomial<TropicalNumber<Max, Rational>, Int>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h", "polymake/TropicalNumber.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<TropicalNumber<Max, Rational>, Int>&>", "perl::Canned<const TropicalNumber<Max, Rational>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h", "polymake/TropicalNumber.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["UniPolynomial<QuadraticExtension<Rational>, Int>", "perl::Canned<const Array<QuadraticExtension<Rational>>&>", "perl::TryCanned<const Array<Int>>"], "include": ["polymake/Array.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/RationalFunction.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["UniPolynomial<Rational, Int>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "perl::Canned<const UniPolynomial<Rational, Int>&>"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["UniPolynomial<QuadraticExtension<Rational>, Int>"], "include": ["polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/RationalFunction.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const UniPolynomial<QuadraticExtension<Rational>, Int>&>", "perl::Canned<const UniPolynomial<QuadraticExtension<Rational>, Int>&>"], "include": ["polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/RationalFunction.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["UniPolynomial<Rational, Int>", "perl::TryCanned<const Array<Int>>", "perl::TryCanned<const Array<Int>>"], "include": ["polymake/Array.h", "polymake/Rational.h", "polymake/RationalFunction.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["UniPolynomial<Rational, Int>", "UniPolynomial<Rational, Int>(Int)"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "new", "sig": "new.C0"},
  {"class": "UniPolynomial<Rational, Integer>", "include": ["polymake/Integer.h", "polymake/Rational.h", "polymake/RationalFunction.h"], "pkg": "Polymake::common::UniPolynomial_A_Rational_I_Integer_Z"},
  {"args": ["UniPolynomial<Rational, Integer>"], "include": ["polymake/Integer.h", "polymake/Rational.h", "polymake/RationalFunction.h"], "op": "new", "sig": "new"},
  {"args": ["UniPolynomial<Rational, Int>", "perl::Canned<const Vector<Rational>&>", "perl::Canned<const Array<Int>&>"], "include": ["polymake/Array.h", "polymake/Rational.h", "polymake/RationalFunction.h", "polymake/Vector.h"], "op": "new", "sig": "new.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "Int"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "_ne", "sig": "_ne:O.X.X"},
  {"args": ["perl::Canned<const UniPolynomial<Rational, Int>&>", "Int"], "include": ["polymake/Rational.h", "polymake/RationalFunction.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["UniPolynomial<Rational, Int>", "perl::Canned<const Vector<Integer>&>", "perl::Canned<const pm::Series<long, true>&>"], "include": ["polymake/Integer.h", "polymake/Rational.h", "polymake/RationalFunction.h", "polymake/Set.h", "polymake/Vector.h"], "op": "new", "sig": "new.X.X"},
 null ],
"version": 3}
