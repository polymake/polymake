{"app": "common",
 "inst": [
  {"guard_name": "CORE_WRAPPERS_Set", "include": ["polymake/Set.h"], "pkg": "Polymake::common::Set", "wrapper_file": "include/core-wrappers/polymake/Set.h"},
  {"class": "Set<Int>", "include": ["polymake/Set.h"], "pkg": "Polymake::common::Set__Int"},
  {"args": ["Set<Int>"], "include": ["polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Set<Int>&>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<Int>&>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/Set.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const Set<Int>&>", "Int"], "include": ["polymake/Set.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<const Set<Int>&>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/Set.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"class": "Set<Array<Int>>", "include": ["polymake/Array.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Array__Int"},
  {"class": "Set<std::pair<Set<Int>, Set<Int>>>", "include": ["polymake/Set.h", "polymake/client.h"], "pkg": "Polymake::common::Set__Pair_A_Set__Int_I_Set__Int_Z"},
  {"class": "Set<Array<Set<Int>>>", "include": ["polymake/Array.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Array__Set__Int"},
  {"class": "Set<Set<Int>>", "include": ["polymake/Set.h"], "pkg": "Polymake::common::Set__Set__Int"},
  {"args": ["Set<Set<Int>>", "perl::Canned<const Array<Set<Int>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Set<Set<Int>>"], "include": ["polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Set<Set<Int>>&>", "perl::Canned<const Set<Set<Int>>&>"], "include": ["polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::AnchorArg<perl::Canned<Set<Int>>>"], "include": ["polymake/Set.h"], "op": "com", "sig": "com:O.X11"},
  {"class": "Set<Polynomial<QuadraticExtension<Rational>, Int>>", "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Polynomial_A_QuadraticExtension__Rational_I_Int_Z"},
  {"class": "Set<Set<Set<Int>>>", "include": ["polymake/Set.h"], "pkg": "Polymake::common::Set__Set__Set__Int"},
  {"class": "Set<Matrix<Int>>", "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Matrix_A_Int_I_NonSymmetric_Z"},
  {"class": "Set<SparseVector<Rational>>", "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/SparseVector.h"], "pkg": "Polymake::common::Set__SparseVector__Rational"},
  {"class": "Set<Polynomial<Rational, Int>>", "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Polynomial_A_Rational_I_Int_Z"},
  {"class": "Set<Vector<Rational>>", "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "pkg": "Polymake::common::Set__Vector__Rational"},
  {"class": "Set<Matrix<Rational>>", "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Matrix_A_Rational_I_NonSymmetric_Z"},
  {"class": "Set<Vector<Int>>", "include": ["polymake/Set.h", "polymake/Vector.h"], "pkg": "Polymake::common::Set__Vector__Int"},
  {"class": "Set<std::pair<Set<Int>, Set<Set<Int>>>>", "include": ["polymake/Set.h", "polymake/client.h"], "pkg": "Polymake::common::Set__Pair_A_Set__Int_I_Set__Set__Int_Z"},
  {"class": "Set<Matrix<QuadraticExtension<Rational>>>", "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Matrix_A_QuadraticExtension__Rational_I_NonSymmetric_Z"},
  {"args": ["Set<Polynomial<QuadraticExtension<Rational>, Int>>"], "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<Set<Polynomial<QuadraticExtension<Rational>, Int>>&>", "perl::Canned<const Polynomial<QuadraticExtension<Rational>, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["Set<Polynomial<Rational, Int>>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<Set<Polynomial<Rational, Int>>&>", "perl::Canned<const Polynomial<Rational, Int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<const Set<Polynomial<QuadraticExtension<Rational>, Int>>&>", "perl::Canned<const Set<Polynomial<QuadraticExtension<Rational>, Int>>&>"], "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<Polynomial<Rational, Int>>&>", "perl::Canned<const Set<Polynomial<Rational, Int>>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Set<Matrix<Rational>>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Set<Matrix<Rational>>&>", "perl::Canned<const Set<Matrix<Rational>>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Set<SparseVector<Rational>>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/SparseVector.h"], "op": "new", "sig": "new"},
  {"args": ["Set<Vector<Rational>>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "new", "sig": "new"},
  {"args": ["Set<Set<Set<Int>>>"], "include": ["polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["Set<std::pair<Set<Int>, Set<Set<Int>>>>"], "include": ["polymake/Set.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["Set<Vector<Int>>"], "include": ["polymake/Set.h", "polymake/Vector.h"], "op": "new", "sig": "new"},
  {"args": ["Set<Array<Int>>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["Set<Matrix<Int>>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Set<SparseVector<Rational>>&>", "perl::Canned<const Set<SparseVector<Rational>>&>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/SparseVector.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<Vector<Rational>>&>", "perl::Canned<const Set<Vector<Rational>>&>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<Set<Set<Int>>>&>", "perl::Canned<const Set<Set<Set<Int>>>&>"], "include": ["polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<std::pair<Set<Int>, Set<Set<Int>>>>&>", "perl::Canned<const Set<std::pair<Set<Int>, Set<Set<Int>>>>&>"], "include": ["polymake/Set.h", "polymake/client.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<Array<Int>>&>", "perl::Canned<const Set<Array<Int>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<Vector<Int>>&>", "perl::Canned<const Set<Vector<Int>>&>"], "include": ["polymake/Set.h", "polymake/Vector.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<Matrix<Int>>&>", "perl::Canned<const Set<Matrix<Int>>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const pm::Series<Int, true>&>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/Set.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["Set<Set<Int>>", "perl::Canned<const Array<Set<Int>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "convert", "ret": "empty", "sig": "convert:O"},
  {"args": ["Set<Int>", "perl::Canned<const pm::Series<Int, true>&>"], "include": ["polymake/Set.h"], "op": "convert", "ret": "empty", "sig": "convert:O"},
  {"args": ["Set<Int>", "perl::Canned<const pm::Indices<pm::sparse_matrix_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::Rational, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&, pm::NonSymmetric> >&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Rational.h", "polymake/Set.h", "polymake/SparseMatrix.h"], "op": "assign", "ret": "empty", "sig": "assign:O"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::AnchorArg<perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>>"], "include": ["polymake/IncidenceMatrix.h"], "op": "com", "sig": "com:O.X11"},
  {"args": ["Set<Set<Int>>", "perl::Canned<const pm::iterator_range<pm::ptr_wrapper<pm::Set<Int, pm::operations::cmp> const, false> >&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"class": "Set<Vector<double>>", "include": ["polymake/Set.h", "polymake/Vector.h"], "pkg": "Polymake::common::Set__Vector__Float"},
  {"args": ["perl::Canned<Set<Vector<Rational>>&>", "perl::Canned<const Set<Vector<Rational>>&>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<Set<Int>&>", "Int"], "include": ["polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<Set<Vector<Rational>>&>", "perl::Canned<const Vector<Rational>&>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<Set<Vector<Rational>>&>", "perl::Canned<const Set<Vector<Rational>>&>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "Sub", "ret": "lvalue", "sig": "Sub:O.X1.X"},
  {"args": ["perl::AnchorArg<perl::Canned<const Set<Int>&>>"], "include": ["polymake/Set.h"], "op": "com", "sig": "com:O.X11"},
  {"args": ["Set<Int>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const Set<Int>&>", "Int"], "func": "exists", "include": ["polymake/Set.h"], "kind": "meth", "sig": "exists:CORE.M.X"},
  {"args": ["perl::Canned<const Set<Int>&>", "perl::Canned<const pm::Series<Int, true>&>"], "include": ["polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)2>, false, (pm::sparse2d::restriction_kind)2> > >", "perl::Canned<const Set<Int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "assign", "ret": "empty", "sig": "assign:O"},
  {"args": ["Set<Int>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "assign", "ret": "empty", "sig": "assign:O"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>", "Int"], "func": "exists", "include": ["polymake/IncidenceMatrix.h"], "kind": "meth", "sig": "exists:CORE.M.X"},
  {"args": ["perl::Canned<const pm::Series<Int, true>&>", "perl::Canned<const pm::Indices<pm::SparseVector<pm::PuiseuxFraction<pm::Min, pm::Rational, pm::Rational> > const&>&>"], "include": ["polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/Set.h", "polymake/SparseVector.h", "polymake/TropicalNumber.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<const pm::Series<Int, true>&>", "perl::Canned<const pm::Indices<pm::SparseVector<pm::Rational> const&>&>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/SparseVector.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["Set<std::pair<Set<Int>, Set<Int>>>"], "include": ["polymake/Set.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<Set<Set<Int>>&>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["Set<Int>", "perl::Canned<const pm::SingleElementSetCmp<Int, pm::operations::cmp>&>"], "include": ["polymake/Set.h"], "op": "assign", "ret": "empty", "sig": "assign:O"},
  {"args": ["perl::AnchorArg<perl::Canned<pm::SingleElementSetCmp<Int, pm::operations::cmp>>>"], "include": ["polymake/Set.h"], "op": "com", "sig": "com:O.X11"},
  {"args": ["perl::Canned<pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>", "Int"], "include": ["polymake/IncidenceMatrix.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["Set<Int>", "perl::Canned<const pm::Series<Int, true>&>"], "include": ["polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Set<Int>", "perl::Canned<const Array<Int>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<Set<Int>&>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/Set.h"], "op": "Sub", "ret": "lvalue", "sig": "Sub:O.X1.X"},
  {"args": ["Set<Int>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const pm::Series<Int, true>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, false, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "assign", "ret": "empty", "sig": "assign:O"},
  {"args": ["Set<Vector<double>>"], "include": ["polymake/Set.h", "polymake/Vector.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<Set<Vector<double>>&>", "perl::Canned<const pm::IndexedSlice<pm::masquerade<pm::ConcatRows, pm::Matrix_base<double>&>, pm::Series<Int, true> const, mlist<> >&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Set.h", "polymake/Vector.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<const Set<Vector<double>>&>", "perl::Canned<const pm::IndexedSlice<pm::masquerade<pm::ConcatRows, pm::Matrix_base<double> const&>, pm::Series<Int, true> const, mlist<> >&>"], "func": "exists", "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Set.h", "polymake/Vector.h"], "kind": "meth", "sig": "exists:CORE.M.X"},
  {"args": ["perl::Canned<Set<Vector<Rational>>&>", "perl::Canned<const pm::IndexedSlice<pm::masquerade<pm::ConcatRows, pm::Matrix_base<pm::Rational>&>, pm::Series<Int, true> const, mlist<> >&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<const Set<Vector<Rational>>&>", "perl::Canned<const pm::IndexedSlice<pm::masquerade<pm::ConcatRows, pm::Matrix_base<pm::Rational> const&>, pm::Series<Int, true> const, mlist<> >&>"], "func": "exists", "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "kind": "meth", "sig": "exists:CORE.M.X"},
  {"args": ["perl::Canned<const Set<Int>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["perl::Canned<const Set<Int>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<Set<Int>&>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const pm::Series<Int, true>&>", "perl::Canned<const pm::Series<Int, true>&>"], "include": ["polymake/Set.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<const Set<std::pair<Set<Int>, Set<Int>>>&>", "perl::Canned<const Set<std::pair<Set<Int>, Set<Int>>>&>"], "include": ["polymake/Set.h", "polymake/client.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"class": "Set<std::string>", "include": ["polymake/Set.h"], "pkg": "Polymake::common::Set__String"},
  {"class": "Set<Vector<Integer>>", "include": ["polymake/Integer.h", "polymake/Set.h", "polymake/Vector.h"], "pkg": "Polymake::common::Set__Vector__Integer"},
  {"args": ["Set<Vector<Integer>>"], "include": ["polymake/Integer.h", "polymake/Set.h", "polymake/Vector.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Set<Vector<Integer>>&>", "perl::Canned<const Set<Vector<Integer>>&>"], "include": ["polymake/Integer.h", "polymake/Set.h", "polymake/Vector.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const Set<Vector<Integer>>&>", "perl::Canned<const Set<Vector<Integer>>&>"], "include": ["polymake/Integer.h", "polymake/Set.h", "polymake/Vector.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<Set<Int>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["Set<std::string>"], "include": ["polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Set<std::string>&>", "std::string"], "include": ["polymake/Set.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["perl::Canned<const Set<std::string>&>", "std::string"], "func": "exists", "include": ["polymake/Set.h"], "kind": "meth", "sig": "exists:CORE.M.X"},
  {"class": "Set<Matrix<PuiseuxFraction<Min, Rational, Rational>>>", "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/Set.h", "polymake/TropicalNumber.h"], "pkg": "Polymake::common::Set__Matrix_A_PuiseuxFraction_A_Min_I_Rational_I_Rational_Z_I_NonSymmetric_Z"},
  {"class": "Set<Matrix<PuiseuxFraction<Max, Rational, Rational>>>", "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/Set.h", "polymake/TropicalNumber.h"], "pkg": "Polymake::common::Set__Matrix_A_PuiseuxFraction_A_Max_I_Rational_I_Rational_Z_I_NonSymmetric_Z"},
  {"class": "Set<Matrix<double>>", "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Matrix_A_Float_I_NonSymmetric_Z"},
  {"args": ["perl::Canned<const Set<Int>&>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/Set.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["Set<Set<Int>>", "perl::Canned<const pm::Rows<pm::IncidenceMatrix<pm::NonSymmetric> >&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Set<Set<Int>>", "perl::Canned<const Set<Set<Int>>&>"], "include": ["polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<Set<Set<Int>>&>", "perl::Canned<const Set<Set<Int>>&>"], "include": ["polymake/Set.h"], "op": "Sub", "ret": "lvalue", "sig": "Sub:O.X1.X"},
  {"args": ["perl::Canned<Set<Vector<Rational>>&>", "perl::Canned<const pm::IndexedSlice<pm::masquerade<pm::ConcatRows, pm::Matrix_base<pm::Rational> const&>, pm::Series<Int, true> const, mlist<> >&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["Set<Vector<Rational>>", "perl::Canned<const Set<Vector<Rational>>&>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<Set<Vector<Rational>>&>", "perl::Canned<const pm::IndexedSlice<pm::masquerade<pm::ConcatRows, pm::Matrix_base<pm::QuadraticExtension<pm::Rational> > const&>, pm::Series<Int, true> const, mlist<> >&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["Set<Int>", "perl::Canned<const pm::PointedSubset<pm::Series<Int, true> >&>"], "include": ["polymake/PowerSet.h", "polymake/Set.h"], "op": "assign", "ret": "empty", "sig": "assign:O"},
  {"args": ["Set<Int>", "perl::Canned<const pm::PointedSubset<pm::Series<Int, true> >&>"], "include": ["polymake/PowerSet.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, false, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, false, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, false, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, false, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>"], "include": ["polymake/IncidenceMatrix.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["Set<Int>", "perl::Canned<const pm::PointedSubset<pm::Set<Int, pm::operations::cmp> >&>"], "include": ["polymake/PowerSet.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>"], "include": ["polymake/IncidenceMatrix.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["perl::Canned<const Set<Int>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, false, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>"], "include": ["polymake/IncidenceMatrix.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const Set<Int>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, false, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"class": "Set<std::pair<Set<Set<Int>>, Vector<Int>>>", "include": ["polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "pkg": "Polymake::common::Set__Pair_A_Set__Set__Int_I_Vector__Int_Z"},
  {"class": "Set<std::pair<Set<Set<Int>>, std::pair<Vector<Int>, Vector<Int>>>>", "include": ["polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "pkg": "Polymake::common::Set__Pair_A_Set__Set__Int_I_Pair_A_Vector__Int_I_Vector__Int_Z_Z"},
  {"args": ["Set<std::pair<Set<Set<Int>>, Vector<Int>>>"], "include": ["polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["Set<std::pair<Set<Set<Int>>, std::pair<Vector<Int>, Vector<Int>>>>"], "include": ["polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Set<std::pair<Set<Set<Int>>, Vector<Int>>>&>", "perl::Canned<const Set<std::pair<Set<Set<Int>>, Vector<Int>>>&>"], "include": ["polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<std::pair<Set<Set<Int>>, std::pair<Vector<Int>, Vector<Int>>>>&>", "perl::Canned<const Set<std::pair<Set<Set<Int>>, std::pair<Vector<Int>, Vector<Int>>>>&>"], "include": ["polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<Set<Int>&>", "Int"], "include": ["polymake/Set.h"], "op": "Xor", "ret": "lvalue", "sig": "Xor:O.X1.X"},
  {"class": "Set<Bitset>", "include": ["polymake/Bitset.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Bitset"},
  {"args": ["Set<Bitset>"], "include": ["polymake/Bitset.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Set<Bitset>&>", "perl::Canned<const Bitset&>"], "func": "exists", "include": ["polymake/Bitset.h", "polymake/Set.h"], "kind": "meth", "sig": "exists:CORE.M.X"},
  {"args": ["perl::Canned<Set<Bitset>&>", "perl::Canned<const Bitset&>"], "include": ["polymake/Bitset.h", "polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<const Set<Set<Int>>&>", "perl::Canned<const Set<Int>&>"], "func": "exists", "include": ["polymake/Set.h"], "kind": "meth", "sig": "exists:CORE.M.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>", "Int"], "func": "exists", "include": ["polymake/IncidenceMatrix.h"], "kind": "meth", "sig": "exists:CORE.M.X"},
  {"args": ["perl::Canned<const Set<Int>&>", "perl::Canned<const Set<Int>&>"], "include": ["polymake/Set.h"], "op": "xor", "sig": "xor:O.X.X"},
  {"class": "Set<std::pair<std::string, Vector<Integer>>>", "include": ["polymake/Integer.h", "polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "pkg": "Polymake::common::Set__Pair_A_String_I_Vector__Integer_Z"},
  {"args": ["Set<std::pair<std::string, Vector<Integer>>>"], "include": ["polymake/Integer.h", "polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Set<std::pair<std::string, Vector<Integer>>>&>", "perl::Canned<const Set<std::pair<std::string, Vector<Integer>>>&>"], "include": ["polymake/Integer.h", "polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"class": "Set<std::pair<std::string, std::string>>", "include": ["polymake/Set.h", "polymake/client.h"], "pkg": "Polymake::common::Set__Pair_A_String_I_String_Z"},
  {"class": "Set<std::pair<std::string, Integer>>", "include": ["polymake/Integer.h", "polymake/Set.h", "polymake/client.h"], "pkg": "Polymake::common::Set__Pair_A_String_I_Integer_Z"},
  {"args": ["Set<std::pair<std::string, Integer>>"], "include": ["polymake/Integer.h", "polymake/Set.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["Set<std::pair<std::string, std::string>>"], "include": ["polymake/Set.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<Set<Int>&>", "Int"], "include": ["polymake/Set.h"], "op": "Sub", "ret": "lvalue", "sig": "Sub:O.X1.X"},
  {"args": ["perl::AnchorArg<perl::Canned<const pm::PointedSubset<pm::Series<long, true> >&>>"], "include": ["polymake/PowerSet.h", "polymake/Set.h"], "op": "com", "sig": "com:O.X11"},
  {"class": "Set<Integer>", "include": ["polymake/Integer.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Integer"},
  {"args": ["perl::Canned<Set<Set<Int>>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<Set<Set<Set<Int>>>&>", "perl::Canned<const Set<Set<Int>>&>"], "include": ["polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<Set<Set<Int>>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<Set<Int>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "Sub", "ret": "lvalue", "sig": "Sub:O.X1.X"},
  {"args": ["Set<Array<Int>>", "perl::Canned<const Array<Array<Int>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "convert", "ret": "empty", "sig": "convert:O"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>", "perl::Canned<const Rational&>"], "func": "exists", "include": ["polymake/IncidenceMatrix.h", "polymake/Rational.h"], "kind": "meth", "sig": "exists:CORE.M.X"},
  {"class": "Set<Matrix<Integer>>", "include": ["polymake/IncidenceMatrix.h", "polymake/Integer.h", "polymake/Matrix.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Matrix_A_Integer_I_NonSymmetric_Z"},
  {"args": ["Set<Matrix<Integer>>", "perl::Canned<const Array<Matrix<Integer>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Integer.h", "polymake/Matrix.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const Set<Matrix<Integer>>&>", "perl::Canned<const Set<Matrix<Integer>>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Integer.h", "polymake/Matrix.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Set<Set<Int>>", "perl::Canned<const pm::binary_transform_iterator<pm::iterator_pair<pm::same_value_iterator<pm::IncidenceMatrix_base<pm::NonSymmetric> const&>, pm::iterator_range<pm::sequence_iterator<long, true> >, mlist<pm::FeaturesViaSecondTag<mlist<pm::end_sensitive> > > >, std::pair<pm::incidence_line_factory<true, void>, pm::BuildBinaryIt<pm::operations::dereference2> >, false>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)2>, false, (pm::sparse2d::restriction_kind)2> > >", "perl::Canned<const Array<Set<Int>>&>"], "include": ["polymake/Array.h", "polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "assign", "ret": "empty", "sig": "assign:O"},
  {"args": ["perl::Canned<const Set<std::pair<std::string, Integer>>&>", "perl::Canned<const Set<std::pair<std::string, Integer>>&>"], "include": ["polymake/Integer.h", "polymake/Set.h", "polymake/client.h"], "op": "_eq", "sig": "_eq:O.X.X"},
 null ],
"version": 3}
