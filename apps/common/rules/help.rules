#  Copyright (c) 1997-2023
#  Ewgenij Gawrilow, Michael Joswig, and the polymake team
#  Technische Universit√§t Berlin, Germany
#  https://polymake.org
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#-------------------------------------------------------------------------------

INCLUDE
  global_categories.rules
  functions_help.rules
  objects_help.rules

# @topic core
# You are in the interactive mode of polymake.
#
# You may type in any valid perl expression, it will be evaluated as soon as it is complete,
# that is, terminated with a semicolon.  Longer constructs (if-else-clauses, loops,
# long lists, etc.) can be continued on several lines; however, it's not possible to
# edit already entered lines.  If you discover a mistake in them, press Control-C to quit
# the continuation block without execution.
#
# The input prompt shows the name of the currently active application.
# To change to another application, type:   application "NAME";
#
# All command line editing features of GNU Readline library are available,
# including history search, key bindings defined in ~/.inputrc, etc.
# Please refer to the documentation shipped with Readline for details.
#
# TAB completion works for well-documented polymake functions, it is context-aware
# and tries its best to propose appropriate choices.
# To enforce filename completion in quoted strings in unknown contexts, press TAB twice.
#
# Variables can be introduced like this: 'declare $x;' or 'declare $x=1;'
# or simply via first assignment: '$x=1;'
# 'my' variables should be used with caution, as their life scope is confined
# to the current block of input.
#
# Here are some help topics for the beginners:
# help 'functions/Basic';
#    An overview of the most useful commands.
# help 'help';
#    How to navigate in the help system.
# help 'functions/Interactive';
#    Other commands available in the interactive shell mode.
# help 'APPLICATION_NAME';
#    Describe the application and list all subtopics in the help tree.
# help 'citation';
#    How to cite polymake correctly.
#
# To get help while typing in a command, press F1.
#
# UNIX shell commands can be submitted in backticks: `...` or via system("...").
# To leave polymake, type:   exit;


# @topic core/citation
#
# If you are using polymake, please, cite:
#
# @incollection{polymake,
#  author =       {Ewgenij Gawrilow and Michael Joswig},
#  title =        {polymake: a Framework for Analyzing Convex Polytopes},
#  pages =        {43-74},
#  editor =       {Gil Kalai and G\"unter M. Ziegler},
#  booktitle =    {Polytopes --- Combinatorics and Computation},
#  publisher =    {Birkh\"auser},
#  year =         {2000}
# }

# @topic core/install_mongodb
# To install the perl-MongoDB module please either try via your package-manager:
#   libmongodb-perl on ubuntu
#
# Or use the below guide to install it via cpan in a custom directory:
#
# Insert the following lines into your .bashrc (or .profile or ).
# (Note that you should adapt the path in the first line to your needs.)
#
#   MYCPANSTUFF=/some/path/for/cpan/installation
#   export PERL_LOCAL_LIB_ROOT="$PERL_LOCAL_LIB_ROOT:$MYCPANSTUFF";
#   export PERL5LIB="$MYCPANSTUFF/lib/perl5:$PERL5LIB";
#   export PATH="$MYCPANSTUFF/bin:$PATH";
#
# Now start a new shell and run
#   env PERL_MB_OPT="--install_base $MYCPANSTUFF" \
#     PERL_MM_OPT="INSTALL_BASE=$MYCPANSTUFF" \
#     cpan
#
# Inside cpan (answer "yes" everywhere) and enter the following lines:
#   o conf build_dir "/tmp/cpanstuff"
#   o conf commit
#   install Params::Validate
#
# Exit and restart cpan with the above command.
#   install MongoDB
#
# (Installing Params::Validate separately first avoids some dependency problems.)


# @topic core/polymake
#       MM                            ,,
#      MM M                         `7MM                                    `7MM
#     M M  M                          MM                                      MM
#    M M    M    `7MMpdMAo.  ,pW"Wq.  MM `7M'   `MF`7MMpMMMb.pMMMb.  ,6"Yb.   MM  ,MP .gP"Ya
#   ,  M   M M     MM   `Wb 6W'   `Wb MM   VA   ,V   MM    MM    MM 8)   MM   MM ;Y  ,M'   Yb
#  MM  M  M   M    MM    M8 8M     M8 MM    VA ,V    MM    MM    MM  ,pm9MM   MM;Mm  8M""""""
# M M MMN      M   MM   ,AP YA.   ,A9 MM     VVV     MM    MM    MM 8M   MM   MM `Mb YM.    ,
#M   MM M       M  MMbmmd'   `Ybmd9'.JMML.   ,V    .JMML  JMML  JMML`Moo9^Yo.JMML. YA `Mbmmd'
#M  M M  M M  MM   MM                       ,V
# MMM M   M M    .JMML.                  OOb"
#  M     MM
#   MM MM
#    MM
#



# Local Variables:
# mode: perl
# cperl-indent-level:3
# indent-tabs-mode:nil
# End:
