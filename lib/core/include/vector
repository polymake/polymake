/* Copyright (c) 1997-2022
   Ewgenij Gawrilow, Michael Joswig, and the polymake team
   Technische Universit√§t Berlin, Germany
   https://polymake.org

   This program is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by the
   Free Software Foundation; either version 2, or (at your option) any
   later version: http://www.gnu.org/licenses/gpl.txt.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
--------------------------------------------------------------------------------
*/

#ifndef POLYMAKE_VECTOR_
#define POLYMAKE_VECTOR_

#include <vector>
#include <cstring>
#include "polymake/internal/operations.h"
#include "polymake/internal/modified_containers.h"

namespace pm {

template <typename Value, typename Alloc>
struct spec_object_traits< std::vector<Value,Alloc> >
   : spec_object_traits<is_container> { };

template <typename Value, typename Alloc> inline
void relocate(std::vector<Value,Alloc>* from, std::vector<Value,Alloc>* to)
{
   using vector_t=std::vector<Value,Alloc>;
   new(to) vector_t(std::move(*from));
   from->~vector_t();
}

#if defined(_LIBCPP_VERSION)

template <typename Iterator>
struct iterator_cross_const_helper<std::__bit_iterator<Iterator,true>, true>{
   typedef std::__bit_iterator<Iterator, false> iterator;
   typedef std::__bit_iterator<Iterator, true> const_iterator;
};
template <typename Iterator>
struct iterator_cross_const_helper<std::__bit_iterator<Iterator,false>, true>{
   typedef std::__bit_iterator<Iterator, false> iterator;
   typedef std::__bit_iterator<Iterator, true> const_iterator;
};

#endif

} // end namespace pm

#endif // POLYMAKE_VECTOR_

// Local Variables:
// mode:C++
// c-basic-offset:3
// indent-tabs-mode:nil
// End:
